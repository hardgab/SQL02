CREATE DATABASE db1609_ParticionamentoTabela;
GO

USE db1609_ParticionamentoTabela;
GO


IF EXISTS(	SELECT * FROM SYS.partition_schemes WHERE name = 'ps_ano')
	DROP PARTITION SCHEME ps_ano;
GO
IF EXISTS( SELECT * FROM SYS.partition_functions WHERE name = 'pf_ano')
	DROP PARTITION FUNCTION pf_ano;
GO


--- OBJETIVO: DIVIR AS TABELAS GRANDES EM PARTIÇÕES PARA MELHORAR O DESEMPENHO E FACILITAR O GERENCIAMENTO DOS DADOS
--- O PARTICIONAMENTO VAI DIVIDIR A TABELA COM BASE EM UM VALOR DE COLUNA, NESSE EXEMPLO USAREMOS DATAS

---- CRIANDO A FUNÇÃO DE PARTICIONAMENTO, ELA QUE DEFINE COMO TUDO VAI SER DISTRIBUIDO 
CREATE PARTITION FUNCTION pf_ano (DATE) 
AS RANGE RIGHT FOR VALUES 
    ('2010-12-12','2011-12-12','2012-12-12','2013-12-12','2014-12-12','2015-12-12'); 
GO



--- CRIAREMOS UM ESQUEMA DE PARTICIONAMENTO. O ESQUEMA DEFINE COMO AS PARTICIPAÇÕES SERÃO DISTRIBUIDAS (NÃO OS DADOS)
CREATE PARTITION SCHEME ps_ano
	AS PARTITION pf_ano 
	TO ([PRIMARY],[PRIMARY],[PRIMARY],[PRIMARY],[PRIMARY],[PRIMARY],[PRIMARY]);--- TODAS AS PARTIÇÃO SERÁ MONTADA AQUI NO TO, NESSE CASO TODAS AS PARTIÇÕES ESTÃO SENDO ALOCADAS NO PRIMARY
GO 



--- AGORA VAMOS EFETIVAMENTE CRIAR A TABELA, USANDO O ESQUEMA DE PARTICIONAMENTO DEFINIDO ANTERIORMENTE
CREATE TABLE vendas (id INT NOT NULL, data DATE NOT NULL, valor DECIMAL (10, 2), cliente_id INT, CONSTRAINT PK_vendas PRIMARY KEY NONCLUSTERED (id, data))
	ON ps_ano (data);
GO



--- inserir os dados na tabela particionada o SQL vai colocar automaticamente os dados nas partições corretas conforme a coluna data
INSERT INTO vendas (id, data, valor, cliente_id) VALUES
(1, '2010-05-01', 150.00, 101),
(2, '2011-06-15', 150.00, 102),
(3, '2012-08-20', 150.00, 103),
(4, '2013-02-20', 150.00, 104),
(5, '2014-11-12', 150.00, 105),
(6, '2015-07-30', 150.00, 106);



--- você pode consultar a tabela normalmente, eo sql vai usar a tabela particionada para acelerar 

SELECT * FROM vendas WHERE data = '2012-08-20';