CREATE DATABASE db1609_IsolamentoTransacional;
GO

USE db1609_IsolamentoTransacional;
GO

CREATE TABLE produtos (
	produto_id INT PRIMARY KEY, 
	nome_produto VARCHAR (100),
	quantidade INT, 
	preco DECIMAL (10, 2));

INSERT INTO produtos (produto_id, nome_produto,quantidade, preco) VALUES
(1,'camiseta', 100, 50.00),
(2,'calça', 50, 100.00),
(3,'tênis', 75, 150.00);

SELECT * FROM produtos;

--- EXEMPLO DE CONTROLE DO ISOLAMENTO TRANSACIONAL PARA OBSERVAR O COMPORTAMENTO, VAMOS REALIZAR ALGUMAS OPERAÇÕES:
--- A) USAR DIFERENTES NÍVEIS DE ISOLAMENTO
--- B) SIMULAR TRANSAÇÕES RECORRENTES

--- COMEÇAMOS COM UMA TRANSAÇÃO COM NÍVEL DE ISOLAMENTO "READ UNCOMMITTED"
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN TRANSACTION;
	--- VAMOS LER OS DADOS DA TABELA DE PRODUTOS, PERMITINDO DADOS NÃO CONFIRMADOS (DIRTY READ)
	PRINT 'Transação 1 (READ UNCOMMITTED)';
	SELECT * FROM produtos;
	--- ALTERANDO DADOS DE QUANTIDADE SEM CONFIRMAR A TRANSAÇÃO
	UPDATE produtos SET quantidade = quantidade - 10 WHERE produto_id = 1;
	--- SIMULANDO O PROCESSAMENTO
	WAITFOR DELAY '00:00:10'; --- ATRASO DE 10 SEGUNDOS
COMMIT TRANSACTION;

--- ESSA TRANSAÇÃO SERÁ COM NÍVEL DE ISOLAMENTO "SERIALIZABLE"
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRANSACTION;
	PRINT 'Transação 2 (SERIALIZABLE)';
	--- TENTANDO LER E BLOQUEAR A LINHA DE PRODUTOS_ID 1
	SELECT * FROM produtos WHERE produto_id = 1;
	WAITFOR DELAY '00:00:10'; --- ATRASO DE 10 SEGUNDOS
COMMIT TRANSACTION;

SELECT * FROM produtos


